[{"content":"框架 - Hugo 选择这个框架的原因，主要还是感觉大家更加推崇这个框架，虽然模板比较少，但是渲染速度快（对于以后有长期更新需求的来说，这点很关键），而且部署比较方便，Github 上 star 数量排静态博客第一，这种时候相信大多数人的选择一般不会有太大问题。\n基础安装 组装工具之前，先把零件准备好，这几个都是成熟的东西，安装很简单，一直点继续就行\nGo Git Hugo 这里安装完后要添加到系统环境变量，点进去后是放到环境变量的 PATH 中，这点坑了我好久。\n测试是否安装成功\n1 2 3 4 \u0026gt; hugo version hugo v0.108.0-a0d64a46e36dd2f503bfd5ba1a5807b900df231d windows/amd64 BuildDate=2022-12-06T13:37:56Z VendorInfo=gohugoio \u0026gt; go version go version go1.19.4 windows/amd64 生成基础配置 1 2 3 4 5 6 7 8 9 10 11 12 13 hugo new site \u0026#39;name\u0026#39; # 初始化网站 ls # 这里是相关文件夹的作用 archetypes # markdown文件的 Front matter 格式 assets content # 存放内容的文件夹 data # 存放数据文件，一般是 json 文件 layouts # 模板文件 public # 真正上传到 github 的部分，渲染后的静态页面 static # 存放静态文件，比如css、js、img等文件目录，Hugo在渲染时，会直接将static目录下的文件直接复制到public目录下，不会做任何渲染。 themes # 存放网站主题，可以下载多个主题，themes目录下的每个子目录代表了一个主题，可以通过在config.toml中通过参数theme指定主题 config.toml # 站点全局的参数配置文件 下载主题并调整 主题到官方网站下载 Complete List | Hugo Themes\n填充内容 预览界面 即使只是刚刚下载好主题，网站内空空如也，肯定也忍不住先看一眼它长什么样，以后会经常这么操作，来回修改。\n1 hugo server -D 然后用浏览器打开本地网页\n生成静态页面 1 hugo --theme=stack --baseUrl=\u0026#34;https://kanrw.github.io\u0026#34; 这里可以指定主题和其他内容生成静态页面，生成的内容会放到 /public 下，**需要推送到 github 上的是 `/publlic\nGitHub Pages GitHubPages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 index. html、HTML、CSS 和 JavaScript 文件，也可以通过构建过程运行文件，然后发布网站。我们使用 GitHubPages 搭建个人网站。\n一个很重要的点是，hugo 生成的网站内容在文件夹下的 public 之中，所以别人 git 的命令都是先切进这个文件夹，外面的文件夹我想叫什么都无所谓。\n推送到 Github 网站配置好，就需要推送到 GitHub 才能让别人也看到。\n由于网络的原因，所以还是用 ssh 的方式连接账户比较的稳定。\n","date":"2023-09-29T00:00:00Z","permalink":"https://kanrw.github.io/p/%E7%BD%91%E7%AB%99%E9%85%8D%E7%BD%AE%E6%96%B9%E6%A1%88/","title":"网站配置方案"}]